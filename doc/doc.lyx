#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 3cm
\rightmargin 2.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Trabalho Prático 1 - Montador
\end_layout

\begin_layout Date
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fernanda de Oliveira Ramalho
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gustavo Henrique Oliveira Costa
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gabriel Henrique Souto Pires
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Raydan Elias Gaspar
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Introdução
\end_layout

\begin_layout Standard
Nesse trabalho prático foi implementado um montador para a CPU Swombat.
 Um montador, que também pode ser chamado de assembler, consiste de um programa
 que cria o código objeto traduzindo as instruções de um programa em assembly
 para linguagem de máquina, ou seja, código binário que o computador entenda.
 O tipo de montador desenvolvido foi o montador de dois passos.
 
\end_layout

\begin_layout Standard
No primeiro dos passos, é feita uma varredura pelo programa inteiro em busca
 de labels definidas, que são armazenadas em uma tabela juntamente da sua
 posição no código.
 Essa tabela é usada no segundo passo para resolver o problema de referencia
 antecipada, que consiste em referenciar uma parte do código que ainda não
 se sabe onde está.
 
\end_layout

\begin_layout Standard
No passo dois também é usada uma tabela de tipos que contém todas as funções
 com formato semelhante agrupadas em tipos, o que facilita na hora de traduzi-la
s para código de máquina, uma vez que funções com mesmo formato são construídas
 do mesmo jeito, com exceção do opcode.
 A máquina utilizada contém apenas instruções de 16 bits, sendo elas escritas
 byte a byte em uma memória de 256 bytes, isso significa que cada instrução
 ocupa duas posições na memória (PC e PC+1 por exemplo) então as instruções
 são buscadas incrementando o PC de 2 em 2.
\end_layout

\begin_layout Section
Desenvolvimento
\end_layout

\begin_layout Standard
O montador foi desenvolvido em C++ usando como saída o formato 
\begin_inset Formula $.mif$
\end_inset

 utilizado pelo CPUSim.
 O formato 
\begin_inset Formula $.mif$
\end_inset

 tem um cabeçalho que indica o tamanho da memória, quantos bits tem cada
 posição de memória, a base dos endereços e a base dos dados na memória.
 Para o Swombat, foi especificado que a memória tem 256 posições que contém
 8 bits cada de dados, os endereços são exibidos em hexadecimal e os dados
 em binário.
 No início do programa é chamada a função 
\shape italic
escreve_cabecalho_mif()
\shape default
 que imprime esse cabeçalho no arquivo de saída.
 O cabeçalho é igual para todos os programas.
\end_layout

\begin_layout Standard
O montador propriamente dito começa a ser executado com a função 
\emph on
preenche_tabela_tipos(),
\emph default
 que cria uma lista do tipo 
\emph on
Tabela_tipos
\emph default
 que é uma struct composta por uma string com o nome da operação (add, load,
 etc), e um inteiro que identifica a qual tipo essa instrução pertence.
 Essa função preenche a lista de tipos levando em consideração o número
 de registradores/operandos que cada instrução usa, ou seja, o formato de
 cada uma.
 Instruções com o mesmo formato são escritas da mesma forma na memória,
 com exceção do opcode, então é útil usar uma mesma função para escrever
 todas as funções de um mesmo tipo.
 Essa função também não depende de nenhuma entrada, uma vez que todas as
 instruções do Swombat foram previamente definidas.
\end_layout

\begin_layout Standard
A primeira coisa que temos que tratar no código é o problema de referência
 antecipada, que consiste em chamar um procedimento que ainda não sabemos
 onde está.
 Isso é resolvido na função 
\emph on
preenche_lista_labels
\emph default
()
\emph on
 
\emph default
que lê o código todo, linha por linha, em busca de cada label.
 Ao encontrar uma label, a função guarda o seu nome e a posição em que a
 label se encontra na lista, que fica disponível para consulta posterior.
 Optamos aqui por criar uma lista de structs assim como na tabela de tipos,
 dessa vez do tipo 
\emph on
Label
\emph default
, sendo que cada struct possui uma string com o nome da label e um inteiro
 que guarda o endereço da label encontrada.
\end_layout

\begin_layout Standard
A passagem dois começa na função 
\emph on
traduz_programa_fonte()
\emph default
 que usa as listas de tipo e de labels criadas anteriormente.
 Nessa função vamos ler as instruções e traduzi-las para código de máquina.
 Cada instrução tem um formato específico, então a cada operando lido uma
 consulta é feita à tabela de tipos para identificar qual o formato da instrução.
 Essa consulta é feita através da função 
\emph on
busca_tipo()
\emph default
 que recebe como parâmetros o nome do campo lido e a lista de tipos previamente
 preenchida.
 Dependendo do tipo da instrução lida, ela é construída de uma maneira diferente
, por exemplo, a função 
\emph on
add
\emph default
 usa dois registradores e 5 bits não são utilizados, já a função 
\emph on
return
\emph default
 usa apenas o seu opcode, já que apenas retorna para o endereço contido
 no topo da pilha, e por esse motivo 11 bits não são utilizados.
 Após separar cada operando da instrução, ela é escrita na memória, sendo
 os 8 primeiros bits em 
\emph on
memoria[pc]
\emph default
 e os 8 últimos bits em 
\emph on
memória[pc+1]
\emph default
.
 O nome da variável 
\emph on
pc
\emph default
 não é tecnicamente correto uma vez que na verdade estamos referenciando
 o valor do Intruction Location Counter (ILC), mas usamos esse nome para
 facilitar a compreensão da estrutura da memória.
 Existe uma variável chamada ILC nessa função, mas ela é usada apenas para
 saber em qual posição da memória será escrita a ultima instrução, para
 que os bytes alocados pela função 
\emph on
.data
\emph default
 sejam alocados a partir dessa posição.
\end_layout

\begin_layout Standard
A instrução 
\emph on
.data
\emph default
 é na verdade uma pseudo instrução, e é construída diferente de todas as
 outras.
 Não existe 
\emph on
opcode
\emph default
 nessa instrução, na verdade a única informação gravada por 
\emph on
.data
\emph default
 na memória é o valor a ser alocado.
 Para gravar de forma correta na memória o valor alocado, o número de bytes
 a ser alocado é lido e guardado numa variável, assim como o valor a ser
 alocado.
 O valor lido é então convertido para binário e jogado em uma string.
 Essa string inicialmente tem o tamanho da memória, ou seja, 256*8 bits.
 Isso teve de ser feito, uma vez que o tipo de dados 
\emph on
bitset
\emph default
 usado para representar os números binários não pode ser alocado com tamanho
 dinâmico, então optamos por alocar o tamanho máximo (espero que ninguém
 tente alocar alguma coisa maior que a memória) e depois ler apenas os bits
 relevantes.
 Depois de ter os dados no formato correto a memória é gravada a partir
 da posição indicada pelo ILC, ou seja, a posição imediatamente depois da
 ultima instrução.
 Os bits a serem gravados são lidos da esquerda para a direita em blocos
 de 8 bits e gravados sequencialmente na memória enquanto o valor de ILC
 é incrementado.
\end_layout

\begin_layout Section
Programas testados
\end_layout

\begin_layout Subsection
Programa 1
\end_layout

\begin_layout Subsubsection
Descrição
\end_layout

\begin_layout Standard
O programa de teste chama-se diversas_instruções.a.
 Nesse programa são testadas alumas instruções, por exemplo, add, subtract,
 loadi, storei, move, multiply, clear e loadc.
 Primeiramente, são recebidos dois valores digitados pelo usuário; esses
 valores são recebidos pelo instruções loadi.
 Os dois valores são somados e o resultado é imprimido na tela.
 Em seguida, o resultado da soma é subtraído do segundo valor digitado pelo
 usuário e o valor da subtração é imprimido na tela.
 O resultado da subtração é carregado para o registrador A2 usando a instrução
 move, é carregado a constante -3 para o registrador A3 e é realizada a
 multiplicação dos registradores A2 e A3.
 O resultado da multiplicação é imprimido na tela.
 Por fim, é carregado para o registrador A4 um dado de 2 bytes inicializado
 com o valor 3, é limpado o registrador A0, é feita a soma de A0 com A4
 e o resultado é imprimido na tela.
\end_layout

\begin_layout Subsubsection
Entrada de dados
\end_layout

\begin_layout Standard
Para realizar o teste desse programa, foi digitado como entrada os valores
 5 e -10.
\end_layout

\begin_layout Subsubsection
Saída esperada
\end_layout

\begin_layout Standard
Para os valores 5 e -10, a registrador A0 recebe 5 e o registrador A1 recebe
 -10.
 Logo a soma será -5.
 A0 passará a ter o valor -5.
 A subtração de A0 e A1 dará 5.
 Esse valor será carregado para A2 onde fará a multiplicação com o registrador
 A3, que terá o valor -3.
 A multiplicação dará -15.
 Por fim, a soma de A0, que teve seu valor limpo, com o registrador A4,
 que recebeu o valor 3 alocado na memória, será 3.
\end_layout

\begin_layout Subsection
Programa 2
\end_layout

\begin_layout Subsubsection
Descrição
\end_layout

\begin_layout Standard
O seguinte programa chama-se push_pop_teste.a.
 O objetivo desse programa é fazer o uso da pilha utilizando as funções
 push e pop.
 São lidos dois valores de entrada e esses valores são armazenados na pilha.
 Em seguida, os valores são desempilhados e é feita a divisão desses valores.
 Imprime-se o resultado da divisão na tela.
 Se a divisão for menor que zero, o programa chama uma label que encerra
 o programa; caso contrário, o valor da divisão é invertido e esse novo
 valor é imprimido na tela.
 Vale ressaltar que o resultado da divisão é sempre arredondado para baixo.
\end_layout

\begin_layout Subsubsection
Entrada de dados
\end_layout

\begin_layout Standard
Como nesse programa existem dois tipos de saída possíveis, será fornecida
 dois tipos de entradas diferentes.
 A primeira entrada terá os valores 10 e 5.
 A segunda entrada será com os valores -10 e 5.
\end_layout

\begin_layout Subsubsection
Saída esperada
\end_layout

\begin_layout Standard
Para a entrada com os valores 10 e 5, esses números serão empilhados e,
 posteriormente, serão desempilhados para, enfim, ser feita a divisão.
 Como o resultado da divisão é maior que zero, o valor da divisão, que é
 2, será invertido e esse novo valor será impresso na tela.
 Logo, teremos dois valores impressos na tela, nesse caso 2 e -2.
\end_layout

\begin_layout Standard
Para a entrada com os valores -10 e 5, esses número serão empilhados e depois,
 desempilhados para ser feita a divisão.
 O resultado da divisão é impresso na tela.
 Como o resultado é menor que zero, nesse caso -2, o programa chamará a
 label que encerrará a execução do programa.
 Logo teremos apenas um número impresso na tela, nesse caso, o número -2.
\end_layout

\begin_layout Section
Testes e simulações
\end_layout

\begin_layout Standard
As duas figuras a seguir estão relacionadas com a execução do programa diversas_
instruções.a.
 A primeira figura mostra os valores em cada registrador usado no programa
 e a segunda figura mostra a saída para entrada 5 e -10.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Diversas_Instruções_Registradores.png
	scale 40
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Registradores diversas_instruções.a
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Diversas_Intruções_Saida.png
	scale 30
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Saída para diversas_instruções.a
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As próximas figuras mostrarão a execução do programa push_pop_teste.a.
 A primeira figura mostra o conteúdo dos registradores usados no programa
 e a segunda figura mostra o resultado para a entrada 10 e 5.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Push_Pop_Teste_Registradores.png
	scale 40
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Registradores push_pop_teste.a
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Push_Pop_Teste_Saida.png
	scale 30
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Saída push_pop_teste.a
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A seguir, teremos mais duas figuras para mostrar o estado dos registradores
 e a saída para a entrada -10 e 5.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Push_Pop_Teste_Neg_Registradores.png
	scale 40
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Registradores push_pop_teste.a
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Push_Pop_Teste_Neg_Saida.png
	scale 30
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Saída push_pop_teste.a
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusão
\end_layout

\begin_layout Standard
Em geral o desenvolvimento do montador não foi muito difícil, o que mais
 gerou dúvidas foi o formato dos programas de entrada.
 A escolha por C++ ao invés de C facilitou muito o desenvolvimento, uma
 vez que optamos por trabalhar com números de tipo binário e vetores de
 tamanho dinâmico para implementar as tabelas, em C isso teria de ser feito
 de forma muito manual, o que criaria muitos problemas desnecessários.
 Traduzir algumas funções como call e return foi muito mais simples do que
 achávamos, já que muito do trabalho é feito exclusivamente pela máquina,
 como manipular a pilha por exemplo.
 Outro problema que encontramos na implementação foi a falta de padronização,
 como a forma de alocar os bytes na função 
\emph on
.data
\emph default
 por exemplo, por esse motivo tentamos seguir o método que o CPUSim utiliza
 o mais fielmente possível.
 Em todos os testes, nossa memória foi escrita corretamente, sendo aceita
 pelo CPUSim em cada um dos casos.
\end_layout

\end_body
\end_document
