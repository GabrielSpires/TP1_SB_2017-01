DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00        :  01101000;              -- loadc A0-5
01        :  11111011;              -- 
02        :  00001011;              -- loadi A3_neg_one ; load -1 -> A3
03        :  00101110;              -- 
04        :  00001000;              -- loadi A0 IO ; read n -> A0
05        :  11111110;              -- 
06        :  00001001;              -- loadi A1 IO ; read m -> A1
07        :  11111110;              -- 
08        :  01001001;              -- jmpn A1_fix_sign ; if m < 0 jump to fix_sign
09        :  00001100;              -- 
0A        :  00111000;              -- jump _clearA2 ; jump to clear
0B        :  00010100;              -- 
0C        :  01010010;              -- _fix_sign: move A2 A1 ; fix_sign: m -> A2
0D        :  00100000;              -- 
0E        :  00100001;              -- subtract A1 A1 ; A1 = A1 - A1 = 0
0F        :  00100000;              -- 
10        :  00100001;              -- subtract A1 A2 ; A1 = A1 - A2 = -m (= abs(m))
11        :  01000000;              -- 
12        :  00010011;              -- storei A3_sign ; store -1 into _sign
13        :  00110000;              -- 
14        :  00100010;              -- _clearA2: subtract A2 A2 ; clear A2
15        :  01000000;              -- 
16        :  01000001;              -- _Start: jmpz A1_D_one ; Start: jump to D_one if m = 0.
17        :  00100000;              -- 
18        :  00011010;              -- add A2 A0 ; add n to the sum in A2
19        :  00000000;              -- 
1A        :  00001111;              -- loadi A7_one
1B        :  00110010;              -- 
1C        :  00100001;              -- subtract A1 A7
1D        :  11100000;              -- 
1E        :  00111000;              -- jump _Start ; go back to Start
1F        :  00010110;              -- 
20        :  00001000;              -- _D_one: loadi A0_sign ; D_one: load the _sign into A0
21        :  00110000;              -- 
22        :  01001000;              -- jmpn A0_neg ; if _sign < 0 jump to neg
23        :  00100110;              -- 
24        :  00111000;              -- jump _pos ; jump to pos
25        :  00101010;              -- 
26        :  00100001;              -- _neg: subtract A1 A2 ; neg: A1 = A1-A2 = -sum
27        :  01000000;              -- 
28        :  01010010;              -- move A2 A1 ; copy A1 into A2
29        :  00100000;              -- 
2A        :  00010010;              -- _pos: storei A2 IO ; pos: output the final sum in A2
2B        :  11111110;              -- 
[2C..2D]:  00000000;              -- 
[2E..2F]:  11111111;              -- 
30        :  00000000;              -- _sign: .data 2 1 ; _sign: (1 or -1)
31        :  00000001;              -- 
32        :  00000000;              -- _one: .data 2 1 ; constant 1
33        :  00000001;              -- 
[34..FF]:  00000000;              -- 
END;
